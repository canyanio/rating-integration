#!CANYAN RATING ENGINE
#
# Canyan Rating engine - example configuration script
#     - web: https://www.canyan.io
#     - git: https://github.com/canyanio/integration
#

event_route[E_DLG_STATE_CHANGED] {
    $avp(ci) = $param(callid);
    if($param(new_state) == 4 ) {
        xlog("L_NOTICE", "E_DLG_STATE_CHANGED - ci: $avp(ci) | state: $param(new_state)\n");
        route(rating_begin_transaction);
    }
    if($param(new_state) == 5 ) {
        xlog("L_NOTICE", "E_DLG_STATE_CHANGED - ci: $avp(ci) | state: $param(new_state)\n");
        route(rating_end_transaction);
    }
}

route[rating_authorization] {
    $json(query) := "{}";
    $json(query/transaction_tag) = $ci;
    $json(query/account_tag) =$fU;
    $json(query/source) = $fu;
    $json(query/destination) = $tu;

    xlog("L_NOTICE", "rating_authorization: $json(query)\n");
    async(rest_post("http://rating-agent:8000/v1/authorization", $json(query), , $var(http_rb), $var(ct), $var(rcode)), rating_authorization_response);
}

route[rating_authorization_response] {
    $var(rc) = $rc;
    if ($var(rc) < 0) {
        xlog("async rest_put() failed with $var(rc), user=$fU\n");
        send_reply(500, "Server Internal Error 3");
        exit;
    }
    if ($var(rcode) >= 300) {
        if ($var(rcode) == 408) {
            xlog("async rest_put() rcode=$var(rcode), user=$fU\n");
            send_reply(500, "Server Internal Error 4");
        } else {
            send_reply(500, "Rating Server Error");
            xlog("L_ALERT", "Rating Agent is not available\n");
        }
        exit;
    }

    xlog("L_NOTICE", "rating_authorization_response: rc=$var(rc) rcode=$var(rcode) httprb=$var(http_rb)\n");
    $json(response) := $var(http_rb);
    if($json(response/authorized) == NULL) {
        xlog("L_ERR", "Cannot parse json data\n");
        route(rating_authorization_response_temporarily_unavailable);
    }
    if ($json(response/authorized) != true) {
        if ($json(response/unauthorized_reason) != "") {
            switch ($json(response/unauthorized_reason)) {
                case "NOT_FOUND":
                    route(rating_authorization_not_found);
                case "NOT_ACTIVE":
                    route(rating_authorization_not_active);
                    break;
                case "UNREACHEABLE_DESTINATION":
                    route(rating_authorization_response_unreacheable_destination);
                    break;
                case "TOO_MANY_RUNNING_TRANSACTIONS":
                    route(rating_authorization_response_too_many_running_transactions);
                    break;
                case "BALANCE_INSUFFICIENT":
                    route(rating_authorization_response_balance_insufficient);
                    break;
                default:
                    route(rating_authorization_response_forbidden);
            }
        }
    }

    $var(max_available_units) = $(json(response/max_available_units){s.int});
    if ($var(max_available_units) <= 0) {
        route(rating_authorization_response_balance_insufficient);
    }
    xlog("L_NOTICE", "Rating: Setting dialog timeout to $var(max_available_units)\n");
    $DLG_timeout = $var(max_available_units);

    $json(carriers) := $json(response/carriers);
    # send_reply(600, "No carrier found");
    # xlog("L_ERR", "ERROR_rating_authorization_response var carriers: $dlg_val(carriers) - empty\n");
    # exit;

    $var(carrier) = $json(carriers[0]);
    $var(reg) = "/UDP:/sip:/g";
    $du = $(var(carrier){re.subst,$var(reg)});
    route(relay);
}

route[rating_begin_transaction] {
    $json(query) := "{}";
    $json(query/transaction_tag) = $avp(ci);
    $json(query/timestamp) = $Ts;
    launch(rest_post("http://rating-agent:8000/v1/begin_transaction", $json(query), , $var(http_rb), $var(ct), $var(rcode)), rating_begin_transaction_response);
    t_relay();
}

route[rating_begin_transaction_response] {
    $var(rc) = $rc;
    if ($var(rc) < 0) {
        xlog("rating_begin_transaction_response: async rest_put() failed with $var(rc), user=$fU\n");
        send_reply(500, "Server Internal Error 3");
        exit;
    }
    if ($var(rcode) >= 300) {
        if ($var(rcode) == 408) {
            xlog("rating_begin_transaction_response: async rest_put() rcode=$var(rcode), user=$fU\n");
            send_reply(500, "Server Internal Error 4");
        } else {
            xlog("L_ALERT", "Rating: Agent is not available\n");
            send_reply(500, "Rating Server Error");
        }
        exit;
    }

    xlog("L_NOTICE", "rating_begin_transaction_response: rc=$var(rc) rcode=$var(rcode) httprb=$var(http_rb)\n");
    $json(response) := $var(http_rb);

    if ($var(rcode) == 200) {
        if ($json(response/ok)) {
            return;
        }
    }

    send_reply(500, "Rating not available");
    xlog("L_ALERT", "Rating: Not available: $var(rcode)\n");
    exit;
}

route[rating_end_transaction] {
    $json(query) := "{}";
    $json(query/transaction_tag) = $avp(ci);
    $json(query/timestamp) = $Ts;
    xlog("L_NOTICE", "rating_end_transaction: $json(query)\n");
    launch(rest_post("http://rating-agent:8000/v1/end_transaction", $json(query), , $var(http_rb), $var(ct), $var(rcode)), rating_end_transaction_response);
    t_relay();
}

route[rating_end_transaction_response] {
    $var(rc) = $rc;
    if ($var(rc) < 0) {
        xlog("rating_end_transaction_response: async rest_put() failed with $var(rc), user=$fU\n");
        send_reply(500, "Server Internal Error 3");
        exit;
    }
    if ($var(rcode) >= 300) {
        if ($var(rcode) == 408) {
            xlog("rating_end_transaction_response: async rest_put() rcode=$var(rcode), user=$fU\n");
            send_reply(500, "Server Internal Error 4");
        } else {
            send_reply(500, "Rating Server Error");
            xlog("L_ALERT", "Rating Agent is not available\n");
        }
        exit;
    }

    xlog("L_NOTICE", "rating_end_transaction_response: rc=$var(rc) rcode=$var(rcode) httprb=$var(http_rb)\n");
    $json(response) := $var(http_rb);

    if ($var(rcode) == 200) {
        if ($json(response/ok)) {
            return;
        }
    }
    send_reply(500, "Rating not available");
    xlog("L_ALERT", "Rating: not available: $var(rcode)\n");
    exit;
}

route[rating_authorization_not_found] {
    xlog("L_NOTICE", "Forbidden -- rating account not found\n");
    send_reply(403, "Forbidden -- rating account not found");
    exit;
}

route[rating_authorization_not_active] {
    xlog("L_NOTICE", "Rating: Forbidden -- rating account not active\n");
    send_reply(403, "Forbidden -- rating account not active");
    exit;
}

route[rating_authorization_response_unreacheable_destination] {
    xlog("L_NOTICE", "Rating: Forbidden -- unreacheable rating destination\n");
    send_reply(403, "Forbidden -- unreacheable rating destination");
    exit;
}

route[rating_authorization_response_too_many_running_transactions] {
    xlog("L_NOTICE", "Rating: Forbidden -- too many ongoing calls\n");
    send_reply(403, "Forbidden -- too many ongoing calls");
    exit;
}

route[rating_authorization_response_balance_insufficient] {
    xlog("L_NOTICE", "Rating: Forbidden -- insufficient balance\n");
    send_reply(403, "Forbidden -- insufficient balance");
    exit;
}

route[rating_authorization_response_forbidden] {
    xlog("L_NOTICE", "Rating: Forbidden\n");
    send_reply(403, "Forbidden");
    exit;
}

route[rating_authorization_response_temporarily_unavailable] {
    xlog("L_NOTICE", "Rating: Temporarily Unavailable\n");
    send_reply(480, "Temporarily Unavailable");
    exit;
}

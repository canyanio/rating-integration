#!CANYAN RATING ENGINE
#
# Canyan Rating engine - example configuration script
#     - web: https://www.canyan.io
#     - git: https://github.com/canyanio/integration
#

event_route[dialog:start] {
    $dlg_var(account_tag) = $fU;

    route(RATING_BEGIN_TRANSACTION);
}

event_route[dialog:end] {
    $dlg_var(account_tag) = $fU;

    route(RATING_END_TRANSACTION);
}

route[RATING_AUTHORIZATION] {
    $http_req(all) = $null;
    $http_req(suspend) = 1;
    $http_req(timeout) = RATING_AGENT_TIMEOUT;
    $http_req(method) = "POST";
    $http_req(hdr) = "Content-Type: application/json";
    jansson_set("string", "transaction_tag", $ci, "$var(query)");
    jansson_set("string", "account_tag", $dlg_var(account_tag), "$var(query)");
    jansson_set("string", "source", $fu, "$var(query)");
    jansson_set("string", "destination", $tu, "$var(query)");
    $http_req(body) = $var(query);
    xlog("L_NOTICE", "RATING_AUTHORIZATION: $var(query)\n");
    t_newtran();
    http_async_query(RATING_AGENT_URL + "/v1/authorization", "RATING_AUTHORIZATION_RESPONSE");
}

route[RATING_AUTHORIZATION_RESPONSE] {
    xlog("L_NOTICE", "RATING_AUTHORIZATION_RESPONSE: httpok=$http_ok httperr=$http_err httprb=$http_rb\n");
    if ($http_ok && $http_rs == 200) {
        if(!jansson_get("authorized", $http_rb, "$var(authorized)")) {
            xlog("L_ERR", "Cannot parse json data\n");
            exit;
        }
        jansson_get("max_available_units", $http_rb, "$var(max_available_units)");
        $var(max_available_units) = $(var(max_available_units){s.int});

        if ($var(authorized) != 1) {
            jansson_get("unauthorized_account_reason", $http_rb, "$var(unauthorized_reason)");
            if ($var(unauthorized_reason) != "") {
                switch ($var(unauthorized_reason)) {
                    case "NOT_FOUND":
                        route(RATING_AUTHORIZATION_RESPONSE_NOT_FOUND);
                    case "NOT_ACTIVE":
                        route(RATING_AUTHORIZATION_RESPONSE_NOT_ACTIVE);
                        break;
                    case "UNREACHEABLE_DESTINATION":
                        route(RATING_AUTHORIZATION_RESPONSE_UNREACHEABLE_DESTINATION);
                        break;
                    case "TOO_MANY_RUNNING_TRANSACTIONS":
                        route(RATING_AUTHORIZATION_RESPONSE_TOO_MANY_RUNNING_TRANSACTIONS);
                        break;
                    case "BALANCE_INSUFFICIENT":
                        route(RATING_AUTHORIZATION_RESPONSE_BALANCE_INSUFFICIENT);
                        break;
                    default:
                        route(RATING_AUTHORIZATION_RESPONSE_FORBIDDEN);
                }
            } else {
                $var(max_available_units) = 14400;
                if !dlg_set_timeout("$var(max_available_units)") {
                    route(RATING_AUTHORIZATION_RESPONSE_TEMPORARILY_UNAVAILABLE);
                } else {
                    xlog("L_NOTICE", "Setting dialog timeout to DEFAULT $var(max_available_units)\n");
                }
            }
        }

        jansson_get("carriers", $http_rb, "$dlg_var(carriers)");
        route(RATING_AUTHORIZATION_PARSE_CARRIERS);
    } else {
        if ($http_rs == 408) {
            send_reply(408, "Rating request timeout");
            xlog("L_ALERT", "Rating Agent is not available\n");
        } else {
            send_reply(500, "Rating Server Error");
            xlog("L_ALERT", "Rating Agent is not available\n");
        }
        exit;
    }

    $du = $dlg_var(carriers);
    route(SIPOUT);
}

route[RATING_AUTHORIZATION_PARSE_CARRIERS] {
    jansson_set("array", "carriers", $dlg_var(carriers), "$var(carriers)");
    jansson_array_size("carriers", $var(carriers), "$var(size)");
    $var(size) = $var(size) - 1;
    if ($var(size) >= 0) {
        while($var(size) >= 0) {
            jansson_get("carriers[$var(size)]", $var(carriers), "$var(v)");
            $dlg_var(carriers) = $(var(v){s.replace,UDP,sip});
            $var(size) = $var(size) - 1;
        }
        return;
    }

    send_reply(600, "No carrier found");
    xlog("L_ERR", "ERROR_RATING_AUTHORIZATION_RESPONSE var carriers: $dlg_var(carriers) - empty\n");
}

route[RATING_BEGIN_TRANSACTION] {
    $http_req(all) = $null;
    $http_req(suspend) = 0;
    $http_req(timeout) = 1900;
    $http_req(method) = "POST";
    $http_req(hdr) = "Content-Type: application/json";
    jansson_set("string", "transaction_tag", $ci, "$var(query)");
    jansson_set("string", "account_tag", $dlg_var(account_tag), "$var(query)");
    jansson_set("string", "source", $fu, "$var(query)");
    jansson_set("string", "destination", $tu, "$var(query)");
    # jansson_set("string", "source_ip", $dlg_var(source_ip), "$var(params)");
    # jansson_set("string", "carrier_ip", $dlg_var(carrier_ip), "$var(params)");
    $http_req(body) = $var(query);
    xlog("L_NOTICE", "RATING_BEGIN_TRANSACTION: $var(query)\n");
    http_async_query(RATING_AGENT_URL + "/v1/begin_transaction", "RATING_BEGIN_TRANSACTION_RESPONSE");
}

route[RATING_BEGIN_TRANSACTION_RESPONSE] {
    xlog("L_NOTICE", "RATING_BEGIN_TRANSACTION_RESPONSE: httpok=$http_ok httperr=$http_err httprb=$http_rb\n");
    if ($http_ok && $http_rs == 200) {
        jansson_get("ok", $http_rb, "$var(ok)");
        if ($var(ok) == true) {
            return;
        }
    }
    send_reply(500, "Rating not available");
    xlog("L_ALERT", "Rating not available: $http_err\n");
    exit;
}

route[RATING_END_TRANSACTION] {
    $http_req(all) = $null;
    $http_req(suspend) = 0;
    $http_req(timeout) = 1900;
    $http_req(method) = "POST";
    $http_req(hdr) = "Content-Type: application/json";
    jansson_set("string", "transaction_tag", $ci, "$var(query)");
    jansson_set("string", "account_tag", $dlg_var(account_tag), "$var(query)");
    jansson_set("string", "source", $fu, "$var(query)");
    jansson_set("string", "destination", $tu, "$var(query)");
    # jansson_set("string", "source_ip", $dlg_var(source_ip), "$var(params)");
    # jansson_set("string", "carrier_ip", $dlg_var(carrier_ip), "$var(params)");
    $http_req(body) = $var(query);
    xlog("L_NOTICE", "RATING_END_TRANSACTION: $var(query)\n");
    http_async_query(RATING_AGENT_URL + "/v1/end_transaction", "RATING_END_TRANSACTION_RESPONSE");
}

route[RATING_END_TRANSACTION_RESPONSE] {
    xlog("L_NOTICE", "RATING_END_TRANSACTION_RESPONSE: httpok=$http_ok httperr=$http_err httprb=$http_rb\n");
    if ($http_ok && $http_rs == 200) {
        jansson_get("ok", $http_rb, "$var(ok)");
        if ($var(ok) == true) {
            return;
        }
    }
    send_reply(500, "Rating not available");
    xlog("L_ALERT", "Rating not available: $http_err\n");
    exit;
}

route[RATING_AUTHORIZATION_RESPONSE_NOT_FOUND] {
    send_reply(403, "Forbidden -- rating account not found");
    exit;
}

route[RATING_AUTHORIZATION_RESPONSE_NOT_ACTIVE] {
    send_reply(403, "Forbidden -- rating account not active");
    exit;
}

route[RATING_AUTHORIZATION_RESPONSE_UNREACHEABLE_DESTINATION] {
    send_reply(403, "Forbidden -- unreacheable rating destination");
    exit;
}

route[RATING_AUTHORIZATION_RESPONSE_TOO_MANY_RUNNING_TRANSACTIONS] {
    send_reply(403, "Forbidden -- too many ongoing calls");
    exit;
}

route[RATING_AUTHORIZATION_RESPONSE_BALANCE_INSUFFICIENT] {
    send_reply(403, "Forbidden -- insufficient balance");
    exit;
}

route[RATING_AUTHORIZATION_RESPONSE_FORBIDDEN] {
    send_reply(403, "Forbidden");
    exit;
}

route[RATING_AUTHORIZATION_RESPONSE_TEMPORARILY_UNAVAILABLE] {
    send_reply(480, "Temporarily Unavailable");
    exit;
}
